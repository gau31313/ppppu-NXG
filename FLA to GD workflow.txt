1 - Flash Doc library item management
1.1)  Make sure that all library items that are placed on the timeline for an animation are not a raw shape. It should be a sprite/movieclip containing a raw shape. This is so the scale up script can work as I couldn't find a way to resize shapes using the javascript api. 

Here is how the heirarchy should look from the perspective of working on an animation
Ok:
Animation
> Item
>> Sprite/MovieClip
>>> Shape

This is not acceptable:
Animation
> Item
>> Shape

1.2) Within the heirarchy of a library item you can have sprite/movieclip children which will be seperated during the svg to png conversion for the purpose of coloring. The library name of the child will be used, so make sure it's named in a way so you know what it's for. The conversion script prioritizes the first level with multiple children and will export from that point.

In short, this is fine:
Item
> Sprite
>> Sprite
>>> Named Sprite
>>> Named Sprite2
>>> Shape

Named Sprite, Named Sprite2, and Shape will be exported to their own pngs at conversion time.

This is not:
Item
> Sprite
>> Named Sprite
>> Shape
>> Named Sprite2
>>> Named Sprite3

Named Sprite3 will be ignored and fully be a part of Named Sprite2.

1.3) Library Item names must follow this convention: PartName-VariantName
Everything after PartName is optional. Item's will be grouped by their PartName and VariantName will be used to indicate that this particular item is a different version of a particular PartName. Direction is used when there are multiple instances of a PartName in an animation, usually for things like arms, legs, and eyes.
Here are some example named: Arm Arm-2 Arm-thing

With that out the way, here's the script workflow:
Auto Rename Layers by Library Name - Does what the name says. In addition, will designate the DirectionFlag (_L or _R) to the name pf layers using 2 instances of the same Part (ie any variant of Arm). Currently doesn't support > 2 instances of the same Part.

Export Multiple Motion XMLs. Goes through the entire animation Layer by Layer and saves the keyframe data to an xml file. Enter the part where you want to save the animations to (I highly recommend using the Game Project's "Animations" folder)

scaleSelectedItems - a jsfl script to enlarge all selected library items by an amount set in the script (default is 500%). Useful as some animations have a graphic scaled beyond 100% which is fine with vector graphics but becomes a blurry eyesore when working with raster graphics. By scaling the library item 500% before exporting to svg, we have leeway with how much NXG can scale the graphic before quality issues occur. Also creates a text file containing the offsets that'll be used so the final graphic composed from 1 or more pngs will have its transformation point (point where it rotates around) match the one used in Flash.

NOTE! You should maintain a seperate fla document for the sole purpose of using it for the scaleSelectedItems script. Just make sure to have a way of knowing what library items you scaled up should you save after running the script.

writeAnimationLayerInfo - Outputs a text file depicting the Z depth order for the Parts of an animation and their mask state. Place the created file into the Game Project's "Base Character Animations/Creation Info" folder 

SVG - This extension allows pre-CC Flash programs to export their graphics to the less proprietary SVG format. Using it, selected library items can be exported to a folder where they'll be worked on.

Inkscape + svg converter.py - Inkscape is a program to work on Vector graphics. svg converter is a python3 script designed to call Inkscape to convert svgs to pngs. Run the python script from the folder with the exported svgs.

Move the folders within the offset folder to the Game project's "Texture" folder. So the same to the folders created by the svg converter and merge the folders.

From here on, run any scripts from the Game project's root folder.

Create Texture tscenes.py - python3 script to create the tscn files from the pngs. The tscns in this case are the graphic formed from assembling the png files for a particular Part-Variant.

Create Char Parts.py - python3 script that creates tscns files for the Char Parts, which are the various objects that make up an animation for the characters. Texture tscn files are required for proper construction.

MotionXML to full animation tres.py - py3 script that creates an Godot Animation resource (.tres format) in the "Base Character Animations" folder, using the various xml files that were creates by that one jsfl script.

Create Base Char Animations.py - The last py3 script needed. Creates the tscn that contains all the found char parts requested (by the Creation Info file for the animation).
